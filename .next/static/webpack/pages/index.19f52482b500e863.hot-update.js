"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/ChatInterface.tsx":
/*!******************************************!*\
  !*** ./src/components/ChatInterface.tsx ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatInterface: () => (/* binding */ ChatInterface)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _MessageList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MessageList */ \"./src/components/MessageList.tsx\");\n/* harmony import */ var _MessageInput__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MessageInput */ \"./src/components/MessageInput.tsx\");\n/* harmony import */ var _ConversationList__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ConversationList */ \"./src/components/ConversationList.tsx\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/index.js\");\n/* harmony import */ var _ui_use_toast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/use-toast */ \"./src/components/ui/use-toast.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\nconst ChatInterface = ()=>{\n    _s();\n    const [conversations, setConversations] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_6__.v4)(),\n            messages: []\n        }\n    ]);\n    const [activeConversationId, setActiveConversationId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(conversations[0].id);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isInitialLoad, setIsInitialLoad] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const { toast } = (0,_ui_use_toast__WEBPACK_IMPORTED_MODULE_5__.useToast)();\n    // This ref will store the accumulated stream data.\n    const accumulatedContentRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(\"\");\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ChatInterface.useEffect\": ()=>{\n            const fetchConversations = {\n                \"ChatInterface.useEffect.fetchConversations\": async ()=>{\n                    try {\n                        const response = await fetch(\"/api/get-conversations\");\n                        if (!response.ok) {\n                            throw new Error(\"Failed to fetch conversations\");\n                        }\n                        const data = await response.json();\n                        if (data && data.length > 0) {\n                            setConversations(data);\n                            setActiveConversationId(data[0].id);\n                        }\n                    } catch (error) {\n                        console.error(\"Error loading conversations:\", error);\n                        toast({\n                            title: \"Error\",\n                            description: \"Failed to load chat history\",\n                            variant: \"destructive\"\n                        });\n                    } finally{\n                        setIsInitialLoad(false);\n                    }\n                }\n            }[\"ChatInterface.useEffect.fetchConversations\"];\n            fetchConversations();\n        }\n    }[\"ChatInterface.useEffect\"], [\n        toast\n    ]);\n    const handleSendMessage = async (content)=>{\n        // Lock in the current conversation so that even if the active conversation changes,\n        // we update the right one.\n        const conversationId = activeConversationId;\n        // Create our user message\n        const userMessage = {\n            role: \"user\",\n            content\n        };\n        // Create a placeholder for the assistant message that will be updated as the stream comes in.\n        const assistantMessage = {\n            role: \"assistant\",\n            content: \"\"\n        };\n        // Build the new messages array.\n        // (Since setState is async, we don’t want to rely on a variable computed before this point.)\n        setConversations((prevConversations)=>prevConversations.map((conv)=>conv.id === conversationId ? {\n                    ...conv,\n                    messages: [\n                        ...conv.messages,\n                        userMessage,\n                        assistantMessage\n                    ]\n                } : conv));\n        setIsLoading(true);\n        try {\n            var _response_body;\n            // Build the request body.\n            // We know what messages we just added so we don’t rely on a stale snapshot.\n            const requestBody = JSON.stringify({\n                message: {\n                    messages: [\n                        userMessage,\n                        assistantMessage\n                    ]\n                }\n            });\n            const response = await fetch(\"http://localhost:8000/chat\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: requestBody\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const reader = (_response_body = response.body) === null || _response_body === void 0 ? void 0 : _response_body.getReader();\n            if (!reader) throw new Error(\"No reader available\");\n            const decoder = new TextDecoder();\n            let accumulatedContent = \"\";\n            // Clear any previous content.\n            accumulatedContentRef.current = \"\";\n            let isFirstChunk = true;\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) break;\n                const chunk = decoder.decode(value);\n                const lines = chunk.split(\"\\n\");\n                if (isFirstChunk) {\n                    setIsLoading(false);\n                    isFirstChunk = false;\n                }\n                for (const line of lines){\n                    if (line.startsWith(\"data: \")) {\n                        line.replace(\" \", \"/s\");\n                        console.log(\"Received line:\", JSON.stringify(line));\n                        const data = line.slice(6);\n                        accumulatedContent += data;\n                        accumulatedContentRef.current = accumulatedContent;\n                        // Testing to see if the elements are being removed\n                        const currentConversation = conversations.find((conv)=>conv.id === conversationId);\n                        // Use a functional update so that you always work off the latest state.\n                        setConversations((prevConversations)=>prevConversations.map((conv)=>{\n                                if (conv.id === conversationId) {\n                                    // Copy the messages array\n                                    const messages = [\n                                        ...conv.messages\n                                    ];\n                                    // Always update the last message (the assistant message)\n                                    const lastIndex = messages.length - 1;\n                                    // console.log(messages[lastIndex].content);\n                                    // console.log(\"Spacing\");\n                                    // console.log(formatContent(accumulatedContentRef.current));\n                                    messages[lastIndex] = {\n                                        ...messages[lastIndex],\n                                        content: accumulatedContentRef.current\n                                    };\n                                    return {\n                                        ...conv,\n                                        messages\n                                    };\n                                }\n                                return conv;\n                            }));\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"Error in chat:\", error);\n            toast({\n                title: \"Error\",\n                description: \"Failed to send message\",\n                variant: \"destructive\"\n            });\n        }\n    };\n    const handleNewChat = ()=>{\n        const newConversation = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_6__.v4)(),\n            messages: []\n        };\n        setConversations((prev)=>[\n                ...prev,\n                newConversation\n            ]);\n        setActiveConversationId(newConversation.id);\n    };\n    const handleDeleteConversation = (id)=>{\n        setConversations((prevConversations)=>{\n            const updatedConversations = prevConversations.filter((conv)=>conv.id !== id);\n            if (activeConversationId === id) {\n                if (updatedConversations.length > 0) {\n                    setActiveConversationId(updatedConversations[0].id);\n                } else {\n                    const newConversation = {\n                        id: (0,uuid__WEBPACK_IMPORTED_MODULE_6__.v4)(),\n                        messages: []\n                    };\n                    setActiveConversationId(newConversation.id);\n                    return [\n                        newConversation\n                    ];\n                }\n            }\n            return updatedConversations;\n        });\n    };\n    if (isInitialLoad) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex h-screen items-center justify-center\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500\"\n            }, void 0, false, {\n                fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n                lineNumber: 198,\n                columnNumber: 9\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n            lineNumber: 197,\n            columnNumber: 7\n        }, undefined);\n    }\n    // Recompute the active conversation on every render\n    const activeConversation = conversations.find((c)=>c.id === activeConversationId) || conversations[0];\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex h-screen bg-gray-50\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ConversationList__WEBPACK_IMPORTED_MODULE_4__.ConversationList, {\n                conversations: conversations,\n                activeConversationId: activeConversationId,\n                onSelect: setActiveConversationId,\n                onDelete: handleDeleteConversation,\n                onNewChat: handleNewChat\n            }, void 0, false, {\n                fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n                lineNumber: 210,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 overflow-hidden flex flex-col\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MessageList__WEBPACK_IMPORTED_MODULE_2__.MessageList, {\n                        messages: activeConversation.messages,\n                        isLoading: isLoading\n                    }, void 0, false, {\n                        fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n                        lineNumber: 219,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MessageInput__WEBPACK_IMPORTED_MODULE_3__.MessageInput, {\n                        onSend: handleSendMessage,\n                        disabled: isLoading\n                    }, void 0, false, {\n                        fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n                        lineNumber: 220,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n                lineNumber: 218,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n        lineNumber: 209,\n        columnNumber: 5\n    }, undefined);\n};\n_s(ChatInterface, \"LRepFZqr6Ux7Eo4vGghh/YdJIe4=\", false, function() {\n    return [\n        _ui_use_toast__WEBPACK_IMPORTED_MODULE_5__.useToast\n    ];\n});\n_c = ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9DaGF0SW50ZXJmYWNlLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBb0Q7QUFDUjtBQUNFO0FBQ1E7QUFDbEI7QUFDTTtBQVluQyxNQUFNUyxnQkFBZ0I7O0lBQzNCLE1BQU0sQ0FBQ0MsZUFBZUMsaUJBQWlCLEdBQUdYLCtDQUFRQSxDQUFpQjtRQUNqRTtZQUFFWSxJQUFJTCx3Q0FBTUE7WUFBSU0sVUFBVSxFQUFFO1FBQUM7S0FDOUI7SUFDRCxNQUFNLENBQUNDLHNCQUFzQkMsd0JBQXdCLEdBQUdmLCtDQUFRQSxDQUM5RFUsYUFBYSxDQUFDLEVBQUUsQ0FBQ0UsRUFBRTtJQUVyQixNQUFNLENBQUNJLFdBQVdDLGFBQWEsR0FBR2pCLCtDQUFRQSxDQUFDO0lBQzNDLE1BQU0sQ0FBQ2tCLGVBQWVDLGlCQUFpQixHQUFHbkIsK0NBQVFBLENBQUM7SUFDbkQsTUFBTSxFQUFFb0IsS0FBSyxFQUFFLEdBQUdaLHVEQUFRQTtJQUUxQixtREFBbUQ7SUFDbkQsTUFBTWEsd0JBQXdCbkIsNkNBQU1BLENBQUM7SUFFckNELGdEQUFTQTttQ0FBQztZQUNSLE1BQU1xQjs4REFBcUI7b0JBQ3pCLElBQUk7d0JBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUFNO3dCQUM3QixJQUFJLENBQUNELFNBQVNFLEVBQUUsRUFBRTs0QkFDaEIsTUFBTSxJQUFJQyxNQUFNO3dCQUNsQjt3QkFDQSxNQUFNQyxPQUFPLE1BQU1KLFNBQVNLLElBQUk7d0JBRWhDLElBQUlELFFBQVFBLEtBQUtFLE1BQU0sR0FBRyxHQUFHOzRCQUMzQmxCLGlCQUFpQmdCOzRCQUNqQlosd0JBQXdCWSxJQUFJLENBQUMsRUFBRSxDQUFDZixFQUFFO3dCQUNwQztvQkFDRixFQUFFLE9BQU9rQixPQUFPO3dCQUNkQyxRQUFRRCxLQUFLLENBQUMsZ0NBQWdDQTt3QkFDOUNWLE1BQU07NEJBQ0pZLE9BQU87NEJBQ1BDLGFBQWE7NEJBQ2JDLFNBQVM7d0JBQ1g7b0JBQ0YsU0FBVTt3QkFDUmYsaUJBQWlCO29CQUNuQjtnQkFDRjs7WUFFQUc7UUFDRjtrQ0FBRztRQUFDRjtLQUFNO0lBRVYsTUFBTWUsb0JBQW9CLE9BQU9DO1FBQy9CLG9GQUFvRjtRQUNwRiwyQkFBMkI7UUFDM0IsTUFBTUMsaUJBQWlCdkI7UUFFdkIsMEJBQTBCO1FBQzFCLE1BQU13QixjQUF1QjtZQUFFQyxNQUFNO1lBQVFIO1FBQVE7UUFDckQsOEZBQThGO1FBQzlGLE1BQU1JLG1CQUE0QjtZQUFFRCxNQUFNO1lBQWFILFNBQVM7UUFBRztRQUVuRSxnQ0FBZ0M7UUFDaEMsNkZBQTZGO1FBQzdGekIsaUJBQWlCLENBQUM4QixvQkFDaEJBLGtCQUFrQkMsR0FBRyxDQUFDLENBQUNDLE9BQ3JCQSxLQUFLL0IsRUFBRSxLQUFLeUIsaUJBQ1I7b0JBQUUsR0FBR00sSUFBSTtvQkFBRTlCLFVBQVU7MkJBQUk4QixLQUFLOUIsUUFBUTt3QkFBRXlCO3dCQUFhRTtxQkFBaUI7Z0JBQUMsSUFDdkVHO1FBSVIxQixhQUFhO1FBRWIsSUFBSTtnQkFxQmFNO1lBcEJmLDBCQUEwQjtZQUMxQiw0RUFBNEU7WUFDNUUsTUFBTXFCLGNBQWNDLEtBQUtDLFNBQVMsQ0FBQztnQkFDakNDLFNBQVM7b0JBQ1BsQyxVQUFVO3dCQUFDeUI7d0JBQWFFO3FCQUFpQjtnQkFDM0M7WUFDRjtZQUVBLE1BQU1qQixXQUFXLE1BQU1DLE1BQU0sOEJBQThCO2dCQUN6RHdCLFFBQVE7Z0JBQ1JDLFNBQVM7b0JBQ1AsZ0JBQWdCO2dCQUNsQjtnQkFDQUMsTUFBTU47WUFDUjtZQUVBLElBQUksQ0FBQ3JCLFNBQVNFLEVBQUUsRUFBRTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNLHVCQUF1QyxPQUFoQkgsU0FBUzRCLE1BQU07WUFDeEQ7WUFFQSxNQUFNQyxVQUFTN0IsaUJBQUFBLFNBQVMyQixJQUFJLGNBQWIzQixxQ0FBQUEsZUFBZThCLFNBQVM7WUFDdkMsSUFBSSxDQUFDRCxRQUFRLE1BQU0sSUFBSTFCLE1BQU07WUFFN0IsTUFBTTRCLFVBQVUsSUFBSUM7WUFDcEIsSUFBSUMscUJBQXFCO1lBQ3pCLDhCQUE4QjtZQUM5Qm5DLHNCQUFzQm9DLE9BQU8sR0FBRztZQUVoQyxJQUFJQyxlQUFlO1lBRW5CLE1BQU8sS0FBTTtnQkFDWCxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTVIsT0FBT1MsSUFBSTtnQkFDekMsSUFBSUYsTUFBTTtnQkFFVixNQUFNRyxRQUFRUixRQUFRUyxNQUFNLENBQUNIO2dCQUM3QixNQUFNSSxRQUFRRixNQUFNRyxLQUFLLENBQUM7Z0JBRTFCLElBQUlQLGNBQWM7b0JBQ2hCekMsYUFBYTtvQkFDYnlDLGVBQWU7Z0JBQ2pCO2dCQUVBLEtBQUssTUFBTVEsUUFBUUYsTUFBTztvQkFDeEIsSUFBSUUsS0FBS0MsVUFBVSxDQUFDLFdBQVc7d0JBQzdCRCxLQUFLRSxPQUFPLENBQUMsS0FBSzt3QkFDbEJyQyxRQUFRc0MsR0FBRyxDQUFDLGtCQUFrQnhCLEtBQUtDLFNBQVMsQ0FBQ29CO3dCQUM3QyxNQUFNdkMsT0FBT3VDLEtBQUtJLEtBQUssQ0FBQzt3QkFDeEJkLHNCQUFzQjdCO3dCQUN0Qk4sc0JBQXNCb0MsT0FBTyxHQUFHRDt3QkFDaEMsbURBQW1EO3dCQUNuRCxNQUFNZSxzQkFBc0I3RCxjQUFjOEQsSUFBSSxDQUFDN0IsQ0FBQUEsT0FBUUEsS0FBSy9CLEVBQUUsS0FBS3lCO3dCQUNuRSx3RUFBd0U7d0JBQ3hFMUIsaUJBQWlCLENBQUM4QixvQkFDaEJBLGtCQUFrQkMsR0FBRyxDQUFDLENBQUNDO2dDQUNyQixJQUFJQSxLQUFLL0IsRUFBRSxLQUFLeUIsZ0JBQWdCO29DQUM5QiwwQkFBMEI7b0NBQzFCLE1BQU14QixXQUFXOzJDQUFJOEIsS0FBSzlCLFFBQVE7cUNBQUM7b0NBQ25DLHlEQUF5RDtvQ0FDekQsTUFBTTRELFlBQVk1RCxTQUFTZ0IsTUFBTSxHQUFHO29DQUNwQyw0Q0FBNEM7b0NBQzVDLDBCQUEwQjtvQ0FDMUIsNkRBQTZEO29DQUM3RGhCLFFBQVEsQ0FBQzRELFVBQVUsR0FBRzt3Q0FDcEIsR0FBRzVELFFBQVEsQ0FBQzRELFVBQVU7d0NBQ3RCckMsU0FBU2Ysc0JBQXNCb0MsT0FBTztvQ0FDeEM7b0NBQ0EsT0FBTzt3Q0FBRSxHQUFHZCxJQUFJO3dDQUFFOUI7b0NBQVM7Z0NBQzdCO2dDQUNBLE9BQU84Qjs0QkFDVDtvQkFFSjtnQkFDRjtZQUNGO1FBQ0YsRUFBRSxPQUFPYixPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQyxrQkFBa0JBO1lBQ2hDVixNQUFNO2dCQUNKWSxPQUFPO2dCQUNQQyxhQUFhO2dCQUNiQyxTQUFTO1lBQ1g7UUFDRjtJQUNGO0lBRUEsTUFBTXdDLGdCQUFnQjtRQUNwQixNQUFNQyxrQkFBa0I7WUFDdEIvRCxJQUFJTCx3Q0FBTUE7WUFDVk0sVUFBVSxFQUFFO1FBQ2Q7UUFDQUYsaUJBQWlCLENBQUNpRSxPQUFTO21CQUFJQTtnQkFBTUQ7YUFBZ0I7UUFDckQ1RCx3QkFBd0I0RCxnQkFBZ0IvRCxFQUFFO0lBQzVDO0lBRUEsTUFBTWlFLDJCQUEyQixDQUFDakU7UUFDaENELGlCQUFpQixDQUFDOEI7WUFDaEIsTUFBTXFDLHVCQUF1QnJDLGtCQUFrQnNDLE1BQU0sQ0FDbkQsQ0FBQ3BDLE9BQVNBLEtBQUsvQixFQUFFLEtBQUtBO1lBR3hCLElBQUlFLHlCQUF5QkYsSUFBSTtnQkFDL0IsSUFBSWtFLHFCQUFxQmpELE1BQU0sR0FBRyxHQUFHO29CQUNuQ2Qsd0JBQXdCK0Qsb0JBQW9CLENBQUMsRUFBRSxDQUFDbEUsRUFBRTtnQkFDcEQsT0FBTztvQkFDTCxNQUFNK0Qsa0JBQWtCO3dCQUFFL0QsSUFBSUwsd0NBQU1BO3dCQUFJTSxVQUFVLEVBQUU7b0JBQUM7b0JBQ3JERSx3QkFBd0I0RCxnQkFBZ0IvRCxFQUFFO29CQUMxQyxPQUFPO3dCQUFDK0Q7cUJBQWdCO2dCQUMxQjtZQUNGO1lBQ0EsT0FBT0c7UUFDVDtJQUNGO0lBRUEsSUFBSTVELGVBQWU7UUFDakIscUJBQ0UsOERBQUM4RDtZQUFJQyxXQUFVO3NCQUNiLDRFQUFDRDtnQkFBSUMsV0FBVTs7Ozs7Ozs7Ozs7SUFHckI7SUFFQSxvREFBb0Q7SUFDcEQsTUFBTUMscUJBQ0p4RSxjQUFjOEQsSUFBSSxDQUFDLENBQUNXLElBQU1BLEVBQUV2RSxFQUFFLEtBQUtFLHlCQUNuQ0osYUFBYSxDQUFDLEVBQUU7SUFFbEIscUJBQ0UsOERBQUNzRTtRQUFJQyxXQUFVOzswQkFDYiw4REFBQzVFLCtEQUFnQkE7Z0JBQ2ZLLGVBQWVBO2dCQUNmSSxzQkFBc0JBO2dCQUN0QnNFLFVBQVVyRTtnQkFDVnNFLFVBQVVSO2dCQUNWUyxXQUFXWjs7Ozs7OzBCQUdiLDhEQUFDTTtnQkFBSUMsV0FBVTs7a0NBQ2IsOERBQUM5RSxxREFBV0E7d0JBQUNVLFVBQVVxRSxtQkFBbUJyRSxRQUFRO3dCQUFFRyxXQUFXQTs7Ozs7O2tDQUMvRCw4REFBQ1osdURBQVlBO3dCQUFDbUYsUUFBUXBEO3dCQUFtQnFELFVBQVV4RTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSTNELEVBQUU7R0E5TVdQOztRQVNPRCxtREFBUUE7OztLQVRmQyIsInNvdXJjZXMiOlsiL1VzZXJzL3BwaXQvRGVza3RvcC9weXRob24tcGF0aHdheS1wcm9qZWN0L3NyYy9jb21wb25lbnRzL0NoYXRJbnRlcmZhY2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTWVzc2FnZUxpc3QgfSBmcm9tIFwiLi9NZXNzYWdlTGlzdFwiO1xuaW1wb3J0IHsgTWVzc2FnZUlucHV0IH0gZnJvbSBcIi4vTWVzc2FnZUlucHV0XCI7XG5pbXBvcnQgeyBDb252ZXJzYXRpb25MaXN0IH0gZnJvbSBcIi4vQ29udmVyc2F0aW9uTGlzdFwiO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcbmltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSBcIi4vdWkvdXNlLXRvYXN0XCI7XG5cbmludGVyZmFjZSBNZXNzYWdlIHtcbiAgcm9sZTogXCJ1c2VyXCIgfCBcImFzc2lzdGFudFwiO1xuICBjb250ZW50OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBDb252ZXJzYXRpb24ge1xuICBpZDogc3RyaW5nO1xuICBtZXNzYWdlczogTWVzc2FnZVtdO1xufVxuXG5leHBvcnQgY29uc3QgQ2hhdEludGVyZmFjZSA9ICgpID0+IHtcbiAgY29uc3QgW2NvbnZlcnNhdGlvbnMsIHNldENvbnZlcnNhdGlvbnNdID0gdXNlU3RhdGU8Q29udmVyc2F0aW9uW10+KFtcbiAgICB7IGlkOiB1dWlkdjQoKSwgbWVzc2FnZXM6IFtdIH1cbiAgXSk7XG4gIGNvbnN0IFthY3RpdmVDb252ZXJzYXRpb25JZCwgc2V0QWN0aXZlQ29udmVyc2F0aW9uSWRdID0gdXNlU3RhdGU8c3RyaW5nPihcbiAgICBjb252ZXJzYXRpb25zWzBdLmlkXG4gICk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpc0luaXRpYWxMb2FkLCBzZXRJc0luaXRpYWxMb2FkXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCB7IHRvYXN0IH0gPSB1c2VUb2FzdCgpO1xuXG4gIC8vIFRoaXMgcmVmIHdpbGwgc3RvcmUgdGhlIGFjY3VtdWxhdGVkIHN0cmVhbSBkYXRhLlxuICBjb25zdCBhY2N1bXVsYXRlZENvbnRlbnRSZWYgPSB1c2VSZWYoXCJcIik7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmZXRjaENvbnZlcnNhdGlvbnMgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiL2FwaS9nZXQtY29udmVyc2F0aW9uc1wiKTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBjb252ZXJzYXRpb25zXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc2V0Q29udmVyc2F0aW9ucyhkYXRhKTtcbiAgICAgICAgICBzZXRBY3RpdmVDb252ZXJzYXRpb25JZChkYXRhWzBdLmlkKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGxvYWRpbmcgY29udmVyc2F0aW9uczpcIiwgZXJyb3IpO1xuICAgICAgICB0b2FzdCh7XG4gICAgICAgICAgdGl0bGU6IFwiRXJyb3JcIixcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJGYWlsZWQgdG8gbG9hZCBjaGF0IGhpc3RvcnlcIixcbiAgICAgICAgICB2YXJpYW50OiBcImRlc3RydWN0aXZlXCIsXG4gICAgICAgIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNJbml0aWFsTG9hZChmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZldGNoQ29udmVyc2F0aW9ucygpO1xuICB9LCBbdG9hc3RdKTtcblxuICBjb25zdCBoYW5kbGVTZW5kTWVzc2FnZSA9IGFzeW5jIChjb250ZW50OiBzdHJpbmcpID0+IHtcbiAgICAvLyBMb2NrIGluIHRoZSBjdXJyZW50IGNvbnZlcnNhdGlvbiBzbyB0aGF0IGV2ZW4gaWYgdGhlIGFjdGl2ZSBjb252ZXJzYXRpb24gY2hhbmdlcyxcbiAgICAvLyB3ZSB1cGRhdGUgdGhlIHJpZ2h0IG9uZS5cbiAgICBjb25zdCBjb252ZXJzYXRpb25JZCA9IGFjdGl2ZUNvbnZlcnNhdGlvbklkO1xuXG4gICAgLy8gQ3JlYXRlIG91ciB1c2VyIG1lc3NhZ2VcbiAgICBjb25zdCB1c2VyTWVzc2FnZTogTWVzc2FnZSA9IHsgcm9sZTogXCJ1c2VyXCIsIGNvbnRlbnQgfTtcbiAgICAvLyBDcmVhdGUgYSBwbGFjZWhvbGRlciBmb3IgdGhlIGFzc2lzdGFudCBtZXNzYWdlIHRoYXQgd2lsbCBiZSB1cGRhdGVkIGFzIHRoZSBzdHJlYW0gY29tZXMgaW4uXG4gICAgY29uc3QgYXNzaXN0YW50TWVzc2FnZTogTWVzc2FnZSA9IHsgcm9sZTogXCJhc3Npc3RhbnRcIiwgY29udGVudDogXCJcIiB9O1xuXG4gICAgLy8gQnVpbGQgdGhlIG5ldyBtZXNzYWdlcyBhcnJheS5cbiAgICAvLyAoU2luY2Ugc2V0U3RhdGUgaXMgYXN5bmMsIHdlIGRvbuKAmXQgd2FudCB0byByZWx5IG9uIGEgdmFyaWFibGUgY29tcHV0ZWQgYmVmb3JlIHRoaXMgcG9pbnQuKVxuICAgIHNldENvbnZlcnNhdGlvbnMoKHByZXZDb252ZXJzYXRpb25zKSA9PlxuICAgICAgcHJldkNvbnZlcnNhdGlvbnMubWFwKChjb252KSA9PlxuICAgICAgICBjb252LmlkID09PSBjb252ZXJzYXRpb25JZFxuICAgICAgICAgID8geyAuLi5jb252LCBtZXNzYWdlczogWy4uLmNvbnYubWVzc2FnZXMsIHVzZXJNZXNzYWdlLCBhc3Npc3RhbnRNZXNzYWdlXSB9XG4gICAgICAgICAgOiBjb252XG4gICAgICApXG4gICAgKTtcblxuICAgIHNldElzTG9hZGluZyh0cnVlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBCdWlsZCB0aGUgcmVxdWVzdCBib2R5LlxuICAgICAgLy8gV2Uga25vdyB3aGF0IG1lc3NhZ2VzIHdlIGp1c3QgYWRkZWQgc28gd2UgZG9u4oCZdCByZWx5IG9uIGEgc3RhbGUgc25hcHNob3QuXG4gICAgICBjb25zdCByZXF1ZXN0Qm9keSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgIG1lc3NhZ2VzOiBbdXNlck1lc3NhZ2UsIGFzc2lzdGFudE1lc3NhZ2VdLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCJodHRwOi8vbG9jYWxob3N0OjgwMDAvY2hhdFwiLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogcmVxdWVzdEJvZHksXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHk/LmdldFJlYWRlcigpO1xuICAgICAgaWYgKCFyZWFkZXIpIHRocm93IG5ldyBFcnJvcihcIk5vIHJlYWRlciBhdmFpbGFibGVcIik7XG5cbiAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbiAgICAgIGxldCBhY2N1bXVsYXRlZENvbnRlbnQgPSBcIlwiO1xuICAgICAgLy8gQ2xlYXIgYW55IHByZXZpb3VzIGNvbnRlbnQuXG4gICAgICBhY2N1bXVsYXRlZENvbnRlbnRSZWYuY3VycmVudCA9IFwiXCI7XG5cbiAgICAgIGxldCBpc0ZpcnN0Q2h1bmsgPSB0cnVlO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICBpZiAoZG9uZSkgYnJlYWs7XG5cbiAgICAgICAgY29uc3QgY2h1bmsgPSBkZWNvZGVyLmRlY29kZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGxpbmVzID0gY2h1bmsuc3BsaXQoXCJcXG5cIik7XG5cbiAgICAgICAgaWYgKGlzRmlyc3RDaHVuaykge1xuICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgaXNGaXJzdENodW5rID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgICAgICBpZiAobGluZS5zdGFydHNXaXRoKFwiZGF0YTogXCIpKSB7XG4gICAgICAgICAgICBsaW5lLnJlcGxhY2UoXCIgXCIsIFwiL3NcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlY2VpdmVkIGxpbmU6XCIsIEpTT04uc3RyaW5naWZ5KGxpbmUpKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBsaW5lLnNsaWNlKDYpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZWRDb250ZW50ICs9IGRhdGE7XG4gICAgICAgICAgICBhY2N1bXVsYXRlZENvbnRlbnRSZWYuY3VycmVudCA9IGFjY3VtdWxhdGVkQ29udGVudDtcbiAgICAgICAgICAgIC8vIFRlc3RpbmcgdG8gc2VlIGlmIHRoZSBlbGVtZW50cyBhcmUgYmVpbmcgcmVtb3ZlZFxuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbnZlcnNhdGlvbiA9IGNvbnZlcnNhdGlvbnMuZmluZChjb252ID0+IGNvbnYuaWQgPT09IGNvbnZlcnNhdGlvbklkKTtcbiAgICAgICAgICAgIC8vIFVzZSBhIGZ1bmN0aW9uYWwgdXBkYXRlIHNvIHRoYXQgeW91IGFsd2F5cyB3b3JrIG9mZiB0aGUgbGF0ZXN0IHN0YXRlLlxuICAgICAgICAgICAgc2V0Q29udmVyc2F0aW9ucygocHJldkNvbnZlcnNhdGlvbnMpID0+XG4gICAgICAgICAgICAgIHByZXZDb252ZXJzYXRpb25zLm1hcCgoY29udikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb252LmlkID09PSBjb252ZXJzYXRpb25JZCkge1xuICAgICAgICAgICAgICAgICAgLy8gQ29weSB0aGUgbWVzc2FnZXMgYXJyYXlcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gWy4uLmNvbnYubWVzc2FnZXNdO1xuICAgICAgICAgICAgICAgICAgLy8gQWx3YXlzIHVwZGF0ZSB0aGUgbGFzdCBtZXNzYWdlICh0aGUgYXNzaXN0YW50IG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBtZXNzYWdlcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobWVzc2FnZXNbbGFzdEluZGV4XS5jb250ZW50KTtcbiAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiU3BhY2luZ1wiKTtcbiAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGZvcm1hdENvbnRlbnQoYWNjdW11bGF0ZWRDb250ZW50UmVmLmN1cnJlbnQpKTtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzW2xhc3RJbmRleF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm1lc3NhZ2VzW2xhc3RJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGFjY3VtdWxhdGVkQ29udGVudFJlZi5jdXJyZW50LFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmNvbnYsIG1lc3NhZ2VzIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb252O1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGNoYXQ6XCIsIGVycm9yKTtcbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6IFwiRXJyb3JcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiRmFpbGVkIHRvIHNlbmQgbWVzc2FnZVwiLFxuICAgICAgICB2YXJpYW50OiBcImRlc3RydWN0aXZlXCIsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlTmV3Q2hhdCA9ICgpID0+IHtcbiAgICBjb25zdCBuZXdDb252ZXJzYXRpb24gPSB7XG4gICAgICBpZDogdXVpZHY0KCksXG4gICAgICBtZXNzYWdlczogW10sXG4gICAgfTtcbiAgICBzZXRDb252ZXJzYXRpb25zKChwcmV2KSA9PiBbLi4ucHJldiwgbmV3Q29udmVyc2F0aW9uXSk7XG4gICAgc2V0QWN0aXZlQ29udmVyc2F0aW9uSWQobmV3Q29udmVyc2F0aW9uLmlkKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVEZWxldGVDb252ZXJzYXRpb24gPSAoaWQ6IHN0cmluZykgPT4ge1xuICAgIHNldENvbnZlcnNhdGlvbnMoKHByZXZDb252ZXJzYXRpb25zKSA9PiB7XG4gICAgICBjb25zdCB1cGRhdGVkQ29udmVyc2F0aW9ucyA9IHByZXZDb252ZXJzYXRpb25zLmZpbHRlcihcbiAgICAgICAgKGNvbnYpID0+IGNvbnYuaWQgIT09IGlkXG4gICAgICApO1xuXG4gICAgICBpZiAoYWN0aXZlQ29udmVyc2F0aW9uSWQgPT09IGlkKSB7XG4gICAgICAgIGlmICh1cGRhdGVkQ29udmVyc2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc2V0QWN0aXZlQ29udmVyc2F0aW9uSWQodXBkYXRlZENvbnZlcnNhdGlvbnNbMF0uaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG5ld0NvbnZlcnNhdGlvbiA9IHsgaWQ6IHV1aWR2NCgpLCBtZXNzYWdlczogW10gfTtcbiAgICAgICAgICBzZXRBY3RpdmVDb252ZXJzYXRpb25JZChuZXdDb252ZXJzYXRpb24uaWQpO1xuICAgICAgICAgIHJldHVybiBbbmV3Q29udmVyc2F0aW9uXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVwZGF0ZWRDb252ZXJzYXRpb25zO1xuICAgIH0pO1xuICB9O1xuXG4gIGlmIChpc0luaXRpYWxMb2FkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBoLXNjcmVlbiBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXNwaW4gcm91bmRlZC1mdWxsIGgtMTIgdy0xMiBib3JkZXItdC0yIGJvcmRlci1iLTIgYm9yZGVyLXB1cnBsZS01MDBcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICAvLyBSZWNvbXB1dGUgdGhlIGFjdGl2ZSBjb252ZXJzYXRpb24gb24gZXZlcnkgcmVuZGVyXG4gIGNvbnN0IGFjdGl2ZUNvbnZlcnNhdGlvbiA9XG4gICAgY29udmVyc2F0aW9ucy5maW5kKChjKSA9PiBjLmlkID09PSBhY3RpdmVDb252ZXJzYXRpb25JZCkgfHxcbiAgICBjb252ZXJzYXRpb25zWzBdO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGgtc2NyZWVuIGJnLWdyYXktNTBcIj5cbiAgICAgIDxDb252ZXJzYXRpb25MaXN0XG4gICAgICAgIGNvbnZlcnNhdGlvbnM9e2NvbnZlcnNhdGlvbnN9XG4gICAgICAgIGFjdGl2ZUNvbnZlcnNhdGlvbklkPXthY3RpdmVDb252ZXJzYXRpb25JZH1cbiAgICAgICAgb25TZWxlY3Q9e3NldEFjdGl2ZUNvbnZlcnNhdGlvbklkfVxuICAgICAgICBvbkRlbGV0ZT17aGFuZGxlRGVsZXRlQ29udmVyc2F0aW9ufVxuICAgICAgICBvbk5ld0NoYXQ9e2hhbmRsZU5ld0NoYXR9XG4gICAgICAvPlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMSBvdmVyZmxvdy1oaWRkZW4gZmxleCBmbGV4LWNvbFwiPlxuICAgICAgICA8TWVzc2FnZUxpc3QgbWVzc2FnZXM9e2FjdGl2ZUNvbnZlcnNhdGlvbi5tZXNzYWdlc30gaXNMb2FkaW5nPXtpc0xvYWRpbmd9IC8+XG4gICAgICAgIDxNZXNzYWdlSW5wdXQgb25TZW5kPXtoYW5kbGVTZW5kTWVzc2FnZX0gZGlzYWJsZWQ9e2lzTG9hZGluZ30gLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZVJlZiIsIk1lc3NhZ2VMaXN0IiwiTWVzc2FnZUlucHV0IiwiQ29udmVyc2F0aW9uTGlzdCIsInY0IiwidXVpZHY0IiwidXNlVG9hc3QiLCJDaGF0SW50ZXJmYWNlIiwiY29udmVyc2F0aW9ucyIsInNldENvbnZlcnNhdGlvbnMiLCJpZCIsIm1lc3NhZ2VzIiwiYWN0aXZlQ29udmVyc2F0aW9uSWQiLCJzZXRBY3RpdmVDb252ZXJzYXRpb25JZCIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImlzSW5pdGlhbExvYWQiLCJzZXRJc0luaXRpYWxMb2FkIiwidG9hc3QiLCJhY2N1bXVsYXRlZENvbnRlbnRSZWYiLCJmZXRjaENvbnZlcnNhdGlvbnMiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJFcnJvciIsImRhdGEiLCJqc29uIiwibGVuZ3RoIiwiZXJyb3IiLCJjb25zb2xlIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInZhcmlhbnQiLCJoYW5kbGVTZW5kTWVzc2FnZSIsImNvbnRlbnQiLCJjb252ZXJzYXRpb25JZCIsInVzZXJNZXNzYWdlIiwicm9sZSIsImFzc2lzdGFudE1lc3NhZ2UiLCJwcmV2Q29udmVyc2F0aW9ucyIsIm1hcCIsImNvbnYiLCJyZXF1ZXN0Qm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXNzYWdlIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJzdGF0dXMiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJhY2N1bXVsYXRlZENvbnRlbnQiLCJjdXJyZW50IiwiaXNGaXJzdENodW5rIiwiZG9uZSIsInZhbHVlIiwicmVhZCIsImNodW5rIiwiZGVjb2RlIiwibGluZXMiLCJzcGxpdCIsImxpbmUiLCJzdGFydHNXaXRoIiwicmVwbGFjZSIsImxvZyIsInNsaWNlIiwiY3VycmVudENvbnZlcnNhdGlvbiIsImZpbmQiLCJsYXN0SW5kZXgiLCJoYW5kbGVOZXdDaGF0IiwibmV3Q29udmVyc2F0aW9uIiwicHJldiIsImhhbmRsZURlbGV0ZUNvbnZlcnNhdGlvbiIsInVwZGF0ZWRDb252ZXJzYXRpb25zIiwiZmlsdGVyIiwiZGl2IiwiY2xhc3NOYW1lIiwiYWN0aXZlQ29udmVyc2F0aW9uIiwiYyIsIm9uU2VsZWN0Iiwib25EZWxldGUiLCJvbk5ld0NoYXQiLCJvblNlbmQiLCJkaXNhYmxlZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/ChatInterface.tsx\n"));

/***/ })

});