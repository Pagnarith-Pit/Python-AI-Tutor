"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/ChatInterface.tsx":
/*!******************************************!*\
  !*** ./src/components/ChatInterface.tsx ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatInterface: () => (/* binding */ ChatInterface)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _MessageList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MessageList */ \"./src/components/MessageList.tsx\");\n/* harmony import */ var _MessageInput__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MessageInput */ \"./src/components/MessageInput.tsx\");\n/* harmony import */ var _ConversationList__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ConversationList */ \"./src/components/ConversationList.tsx\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/index.js\");\n/* harmony import */ var _ui_use_toast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/use-toast */ \"./src/components/ui/use-toast.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\nconst ChatInterface = ()=>{\n    _s();\n    const [conversations, setConversations] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([\n        {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_6__.v4)(),\n            messages: []\n        }\n    ]);\n    const [activeConversationId, setActiveConversationId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(conversations[0].id);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isInitialLoad, setIsInitialLoad] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const { toast } = (0,_ui_use_toast__WEBPACK_IMPORTED_MODULE_5__.useToast)();\n    // This ref will store the accumulated stream data.\n    const accumulatedContentRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(\"\");\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ChatInterface.useEffect\": ()=>{\n            const fetchConversations = {\n                \"ChatInterface.useEffect.fetchConversations\": async ()=>{\n                    try {\n                        const response = await fetch(\"/api/get-conversations\");\n                        if (!response.ok) {\n                            throw new Error(\"Failed to fetch conversations\");\n                        }\n                        const data = await response.json();\n                        if (data && data.length > 0) {\n                            setConversations(data);\n                            setActiveConversationId(data[0].id);\n                        }\n                    } catch (error) {\n                        console.error(\"Error loading conversations:\", error);\n                        toast({\n                            title: \"Error\",\n                            description: \"Failed to load chat history\",\n                            variant: \"destructive\"\n                        });\n                    } finally{\n                        setIsInitialLoad(false);\n                    }\n                }\n            }[\"ChatInterface.useEffect.fetchConversations\"];\n            fetchConversations();\n        }\n    }[\"ChatInterface.useEffect\"], [\n        toast\n    ]);\n    const handleSendMessage = async (content)=>{\n        // Lock in the current conversation so that even if the active conversation changes,\n        // we update the right one.\n        const conversationId = activeConversationId;\n        // Create our user message\n        const userMessage = {\n            role: \"user\",\n            content\n        };\n        // Create a placeholder for the assistant message that will be updated as the stream comes in.\n        const assistantMessage = {\n            role: \"assistant\",\n            content: \"\"\n        };\n        // Build the new messages array.\n        // (Since setState is async, we don’t want to rely on a variable computed before this point.)\n        setConversations((prevConversations)=>prevConversations.map((conv)=>conv.id === conversationId ? {\n                    ...conv,\n                    messages: [\n                        ...conv.messages,\n                        userMessage,\n                        assistantMessage\n                    ]\n                } : conv));\n        setIsLoading(true);\n        try {\n            var _response_body;\n            // Build the request body.\n            // We know what messages we just added so we don’t rely on a stale snapshot.\n            const requestBody = JSON.stringify({\n                message: {\n                    messages: [\n                        userMessage,\n                        assistantMessage\n                    ]\n                }\n            });\n            const response = await fetch(\"http://localhost:8000/chat\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: requestBody\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const reader = (_response_body = response.body) === null || _response_body === void 0 ? void 0 : _response_body.getReader();\n            if (!reader) throw new Error(\"No reader available\");\n            const decoder = new TextDecoder();\n            let accumulatedContent = \"\";\n            // Clear any previous content.\n            accumulatedContentRef.current = \"\";\n            let isFirstChunk = true;\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) break;\n                const chunk = decoder.decode(value);\n                const lines = chunk.split(\"\\n\");\n                if (isFirstChunk) {\n                    setIsLoading(false);\n                    isFirstChunk = false;\n                }\n                for (const line of lines){\n                    if (line.startsWith(\"data: \")) {\n                        const data = line.slice(6);\n                        console.log(\"This is data: \", data);\n                        accumulatedContent += data;\n                        accumulatedContentRef.current = accumulatedContent;\n                        // Testing to see if the elements are being removed\n                        const currentConversation = conversations.find((conv)=>conv.id === conversationId);\n                        // Use a functional update so that you always work off the latest state.\n                        setConversations((prevConversations)=>prevConversations.map((conv)=>{\n                                if (conv.id === conversationId) {\n                                    // Copy the messages array\n                                    const messages = [\n                                        ...conv.messages\n                                    ];\n                                    // Always update the last message (the assistant message)\n                                    const lastIndex = messages.length - 1;\n                                    // console.log(messages[lastIndex].content);\n                                    // console.log(\"Spacing\");\n                                    // console.log(formatContent(accumulatedContentRef.current));\n                                    messages[lastIndex] = {\n                                        ...messages[lastIndex],\n                                        content: accumulatedContentRef.current\n                                    };\n                                    return {\n                                        ...conv,\n                                        messages\n                                    };\n                                }\n                                return conv;\n                            }));\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"Error in chat:\", error);\n            toast({\n                title: \"Error\",\n                description: \"Failed to send message\",\n                variant: \"destructive\"\n            });\n        }\n    };\n    const handleNewChat = ()=>{\n        const newConversation = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_6__.v4)(),\n            messages: []\n        };\n        setConversations((prev)=>[\n                ...prev,\n                newConversation\n            ]);\n        setActiveConversationId(newConversation.id);\n    };\n    const handleDeleteConversation = (id)=>{\n        setConversations((prevConversations)=>{\n            const updatedConversations = prevConversations.filter((conv)=>conv.id !== id);\n            if (activeConversationId === id) {\n                if (updatedConversations.length > 0) {\n                    setActiveConversationId(updatedConversations[0].id);\n                } else {\n                    const newConversation = {\n                        id: (0,uuid__WEBPACK_IMPORTED_MODULE_6__.v4)(),\n                        messages: []\n                    };\n                    setActiveConversationId(newConversation.id);\n                    return [\n                        newConversation\n                    ];\n                }\n            }\n            return updatedConversations;\n        });\n    };\n    if (isInitialLoad) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex h-screen items-center justify-center\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500\"\n            }, void 0, false, {\n                fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n                lineNumber: 197,\n                columnNumber: 9\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n            lineNumber: 196,\n            columnNumber: 7\n        }, undefined);\n    }\n    // Recompute the active conversation on every render\n    const activeConversation = conversations.find((c)=>c.id === activeConversationId) || conversations[0];\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex h-screen bg-gray-50\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ConversationList__WEBPACK_IMPORTED_MODULE_4__.ConversationList, {\n                conversations: conversations,\n                activeConversationId: activeConversationId,\n                onSelect: setActiveConversationId,\n                onDelete: handleDeleteConversation,\n                onNewChat: handleNewChat\n            }, void 0, false, {\n                fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n                lineNumber: 209,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 overflow-hidden flex flex-col\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MessageList__WEBPACK_IMPORTED_MODULE_2__.MessageList, {\n                        messages: activeConversation.messages,\n                        isLoading: isLoading\n                    }, void 0, false, {\n                        fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n                        lineNumber: 218,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MessageInput__WEBPACK_IMPORTED_MODULE_3__.MessageInput, {\n                        onSend: handleSendMessage,\n                        disabled: isLoading\n                    }, void 0, false, {\n                        fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n                        lineNumber: 219,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n                lineNumber: 217,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ppit/Desktop/python-pathway-project/src/components/ChatInterface.tsx\",\n        lineNumber: 208,\n        columnNumber: 5\n    }, undefined);\n};\n_s(ChatInterface, \"LRepFZqr6Ux7Eo4vGghh/YdJIe4=\", false, function() {\n    return [\n        _ui_use_toast__WEBPACK_IMPORTED_MODULE_5__.useToast\n    ];\n});\n_c = ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ChatInterface.tsx\n"));

/***/ })

});